rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Allow users to read/write their own data
    match /users/{userId} {
      allow read, write: if request.auth != null && request.auth.uid == userId;
    }

    // Allow anyone to read products
    match /products/{productId} {
      allow read: if true;
      
      // Allow admins to create products
      allow create: if 
        request.auth != null &&
        isAdmin() && // Only admins can create
        isValidProductCreation(request.resource.data);
      
      // Allow admins to update stock and sold fields
      allow update: if 
        request.auth != null &&
        isAdmin(); // Only admins can update
      
      // Allow admins to delete products
      allow delete: if 
        request.auth != null &&
        isAdmin(); // Only admins can delete
    }

    // Allow users to create and read their own orders
    match /orders/{orderId} {
      allow create: if 
        request.auth != null &&
        request.resource.data.userId == request.auth.uid &&
        isValidOrder(request.resource.data);
      
      allow read: if 
        request.auth != null && 
        (resource.data.userId == request.auth.uid || isAdmin());
      
      // Allow admins to update any order status
      allow update: if 
        request.auth != null &&
        isAdmin(); // Only admins can update
      
      allow delete: if false;

      // Function to validate order data
      function isValidOrder(data) {
        return data.keys().hasAll([
          'userId', 'items', 'total', 'status', 
          'createdAt', 'shippingAddress'
        ]) &&
        data.userId == request.auth.uid &&
        data.items is list &&
        data.items.size() > 0 &&
        data.total is number &&
        data.total > 0 &&
        data.status in ['pending', 'paid', 'shipped', 'delivered', 'cancelled'] &&
        data.createdAt == request.time;
      }
    }

    // Function to validate product creation data
    function isValidProductCreation(data) {
      return data.keys().hasAll([
        "name", "price", "description", "imageUrl", 
        "category", "stock", "createdAt", "sold", "rating"
      ]) &&
      data.name is string &&
      data.price is number &&
      data.description is string &&
      data.imageUrl is string &&
      data.category is string &&
      data.stock is number &&
      data.sold == 0 &&
      data.rating >= 0 &&
      data.rating <= 5 &&
      data.createdAt == request.time &&
      data.name.size() >= 3 &&
      data.price > 0 &&
      data.stock >= 0 &&
      data.imageUrl.matches("^https?://.+") &&
      data.category in ["men", "electronics", "women", "home", 
                       "sports", "kids", "appliances", "toys","uncategorized"];
    }

    // Function to check if user is admin
    function isAdmin() {
      return request.auth != null && request.auth.token.admin == true;
    }
  }
}